"""
Django settings for template project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import os
from pathlib import Path

import dotenv
import sentry_sdk.utils
from corsheaders.defaults import default_headers

ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
IS_PROD = ENVIRONMENT == 'production'

if ENVIRONMENT == 'local':
    logging.basicConfig(level=logging.DEBUG)
if os.getenv('SENTRY_DSN'):
    _sentry_env = os.getenv('SENTRY_ENV', 'development')
    sentry_sdk.init(
        dsn=os.getenv('SENTRY_DSN'),
        traces_sample_rate=1.0,  # can be reduced in prod...
        environment=_sentry_env,
        send_default_pii=True if _sentry_env != 'production' else False,
        attach_stacktrace=True,
        max_value_length=4096,
    )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv.read_dotenv(BASE_DIR, True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', '^_^')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True' or os.getenv('ENVIRONMENT') == 'development'

ALLOWED_HOSTS = [os.getenv("API_DOMAIN_NAME")]

API_DOMAIN_NAME = os.getenv("API_DOMAIN_NAME")
APP_DOMAIN_NAME = os.getenv("APP_DOMAIN_NAME")

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.RemoteUserBackend',
]

AUTH_USER_MODEL = 'users.User'

# auth0
AUTH0_ORIGINAL_DOMAIN = os.getenv("AUTH0_DOMAIN")  # 'dev-jnso8xn6b1daq18g.us.auth0.com'
AUTH0_CUSTOM_DOMAIN = os.getenv("AUTH0_CUSTOM_DOMAIN")  # Auth0 'custom domain'
AUTH0_DOMAIN = AUTH0_CUSTOM_DOMAIN if AUTH0_CUSTOM_DOMAIN else AUTH0_ORIGINAL_DOMAIN
AUTH0_API_IDENTIFIER = os.getenv("AUTH0_API_IDENTIFIER")  # 'https://api-staging....'

AUTH0_MANAGEMENT_CLIENT_DOMAIN = AUTH0_ORIGINAL_DOMAIN  # Auth0 management application domain
AUTH0_MANAGEMENT_CLIENT_SECRET = os.getenv("AUTH0_MANAGEMENT_CLIENT_SECRET")
AUTH0_MANAGEMENT_CLIENT_ID = os.getenv("AUTH0_MANAGEMENT_CLIENT_ID")

# onesignal
ONESIGNAL_API_KEY = os.getenv("ONESIGNAL_API_KEY")
ONESIGNAL_APP_ID = os.getenv("ONESIGNAL_APP_ID")

# see https://documentation.onesignal.com/docs/twilio-setup
ONESIGNAL_TWILIO_FROM_NUMBER = os.getenv("ONESIGNAL_TWILIO_FROM_NUMBER")

# SendGrid
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")

SUPPORT_EMAIL = os.getenv('SUPPORT_EMAIL', 'support@<PROJECT_NAME>.com')
ADMIN_NOTIFICATIONS_EMAIL = os.getenv('ADMIN_NOTIFICATIONS_EMAIL', 'support@<PROJECT_NAME>.com')
SUPPORT_NAME = os.getenv('SUPPORT_NAME', '<PROJECT_NAME> Support')

# Plaid payments processing
PLAID_CLIENT_ID = os.getenv("PLAID_CLIENT_ID")
PLAID_SECRET = os.getenv("PLAID_SECRET")
PLAID_APP_NAME = os.getenv("PLAID_APP_NAME", 'SFA')
PLAID_ENV = os.getenv("PLAID_ENV", 'Sandbox')

# TreasuryPrime payments processing
TREASURY_PRIME_API_ENDPOINT = os.getenv('TREASURY_PRIME_API_ENDPOINT')
TREASURY_PRIME_API_KEY_ID = os.getenv('TREASURY_PRIME_API_KEY_ID')
TREASURY_PRIME_API_SECRET_KEY = os.getenv('TREASURY_PRIME_API_SECRET_KEY')
TREASURY_PRIME_WEBHOOK_USERNAME = os.getenv('TREASURY_PRIME_WEBHOOK_USERNAME')
TREASURY_PRIME_WEBHOOK_PASSWORD = os.getenv('TREASURY_PRIME_WEBHOOK_PASSWORD')

TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_VERIFY_SID = os.getenv("TWILIO_VERIFY_SID")
TWILIO_FROM_NUMBER = os.getenv("TWILIO_FROM_NUMBER")

COMET_CHAT_API_URL = os.getenv("COMET_CHAT_API_URL")
COMET_CHAT_REST_KEY = os.getenv("COMET_CHAT_REST_KEY")

STRIPE_API_KEY = os.getenv("STRIPE_API_KEY")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")

CORS_ALLOWED_ORIGINS = [
    'https://%s' % APP_DOMAIN_NAME,
]

CORS_ALLOW_HEADERS = (
    *default_headers,
    "sentry-trace",
    "baggage"
)
# Application definition

INSTALLED_APPS = [
    'django_dramatiq',
    'dramatiq_crontab',
    'corsheaders',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',

    'rest_framework',
    'push_notifications',

    'django_app.apps.DjangoAppConfig',
    'core_utils.apps.CoreUtilsConfig',
    'users.apps.UsersConfig',
    'plaid_app.apps.PlaidAppConfig',
    'treasuryprime_app.apps.TreasuryprimeAppConfig',
    'signwell.apps.SignwellConfig',
    'storage.apps.StorageConfig',
    'sendgrid_app.apps.SendgridConfig',
    'comet_chat.apps.CometChatConfig',
    'stripe_app.apps.StripeAppConfig',
    'expo_notifications.apps.ExpoNotificationsConfig',
]

MIDDLEWARE = [
    'core_utils.middleware.elb_health_check.ELBHealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core_utils.middleware.json_exception.JsonExceptionMiddleware',
]

ROOT_URLCONF = 'django_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATA_DB_NAME'),
        'USER': os.getenv('DATA_DB_USER'),
        'PASSWORD': os.getenv('DATA_DB_PASSWORD'),
        'HOST': os.getenv('DATA_DB_HOST'),
        'PORT': os.getenv('DATA_DB_PORT'),
        'CONN_MAX_AGE': int(os.getenv('DATA_DB_CONN_MAX_AGE', 0)),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'core_utils.permissions.HasRole',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'core_utils.auth_utils.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER': 'core_utils.auth_utils.jwt_decode_token',
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': AUTH0_API_IDENTIFIER,
    'JWT_ISSUER': 'https://%s/' % AUTH0_DOMAIN,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

PUSH_NOTIFICATIONS_SETTINGS = {
    # "APNS_CERTIFICATE": _apns_path,
    # "APNS_TOPIC": os.getenv('APNS_TOPIC'),

    'USER_MODEL': 'users.User'
}
EXPO_NOTIFICATIONS_TOKEN = os.getenv('EXPO_NOTIFICATIONS_TOKEN')


SIGNWELL_API_KEY = os.getenv('SIGNWELL_API_KEY')
SIGNWELL_API_APP_ID = os.getenv('SIGNWELL_API_APP_ID')
SIGNWELL_WEBHOOK_KEY = os.getenv('SIGNWELL_WEBHOOK_KEY')

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.getenv('STATIC_ROOT') or ''

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DRAMATIQ_REDIS_HOST = os.environ.get('DRAMATIQ_REDIS_HOST')
DRAMATIQ_REDIS_PORT = os.environ.get('DRAMATIQ_REDIS_PORT')
DRAMATIQ_NAMESPACE = os.environ.get('DRAMATIQ_NAMESPACE', 'dramatiq_django')
DRAMATIQ_BROKER = {
    'BROKER': 'dramatiq.brokers.redis.RedisBroker',
    'OPTIONS': {
        'host': DRAMATIQ_REDIS_HOST,
        'port': DRAMATIQ_REDIS_PORT,
        'namespace': DRAMATIQ_NAMESPACE,
        # 'ssl': True,
        # 'ssl_cert_reqs': 'none',
    },
    'MIDDLEWARE': [
        'dramatiq.middleware.AgeLimit',
        'dramatiq.middleware.TimeLimit',
        'dramatiq.middleware.Callbacks',
        'dramatiq.middleware.Pipelines',
        'dramatiq.middleware.Retries',
        'django_dramatiq.middleware.AdminMiddleware',
        'django_dramatiq.middleware.DbConnectionsMiddleware',
    ]
}
DRAMATIQ_TASKS_DATABASE = 'default'
DRAMATIQ_AUTODISCOVER_MODULES = ["tasks"]

# can be used to prevent multiple crons from running
# DRAMATIQ_CRONTAB = {
#     "REDIS_URL": "redis://%s:%s/9" % (DRAMATIQ_REDIS_HOST, DRAMATIQ_REDIS_PORT),
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'timestamp': {
            'format': '{asctime} | {process} | {levelname} | {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'timestamp',
            'filters': ['require_debug_false'],
        },
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'timestamp',
            'filters': ['require_debug_true'],
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': [
            'console',
            'console_debug'
        ],
        'propagate': True,
    },
    'loggers': {

    }
}
