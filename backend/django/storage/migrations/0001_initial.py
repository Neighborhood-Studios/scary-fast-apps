# Generated by Django 4.2.3 on 2023-07-31 19:30

from django.db import migrations, models
import django.db.models.deletion
from django_add_default_value import AddDefaultValue, NOW

SQL = '''

-- generic update function that can be re-run to add triggers to all public tables
DO LANGUAGE plpgsql
$$
    DECLARE
        rec record;
    BEGIN
        FOR rec IN
            SELECT
                c.table_schema AS schema,
                c.table_name,
                tgs.trigger_name
            FROM information_schema.columns c
                 LEFT JOIN information_schema.triggers tgs
                           ON
                                       tgs.trigger_schema = c.table_schema
                                   AND tgs.event_object_table = c.table_name
                                   AND tgs.trigger_name = c.table_name || '_timestamps_trig'
            WHERE c.column_name = 'created_at'
              AND c.table_schema = 'public'
              AND tgs.trigger_name IS NULL
        LOOP
            -- internal tables that should be excluded
            IF rec.table_name IN ('django_dramatiq_task')
            THEN
                CONTINUE;
            END IF;

            -- set default value
            EXECUTE format(
                    'ALTER TABLE %I.%I ALTER created_at SET DEFAULT CURRENT_TIMESTAMP',
                    rec.schema,
                    rec.table_name
                );

            EXECUTE format(
                    'CREATE TRIGGER %I BEFORE INSERT OR UPDATE ON %I.%I FOR EACH ROW EXECUTE PROCEDURE public.update_timestamps_func()',
                    rec.table_name || '_timestamps_trig',
                    rec.schema, rec.table_name, rec.table_name);
        END loop;
    END ;
$$;

ALTER TABLE storage_buckets
    ADD CONSTRAINT download_expiration_valid_range
        CHECK (download_expiration >= 1 AND download_expiration <= 604800);


CREATE OR REPLACE FUNCTION protect_default_bucket_delete ()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $a$
BEGIN
  IF OLD.ID = 'default' THEN
    RAISE EXCEPTION 'Can not delete default bucket';
  END IF;
  RETURN OLD;
END;
$a$;

CREATE OR REPLACE FUNCTION protect_default_bucket_update ()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $a$
BEGIN
  IF OLD.ID = 'default' AND NEW.ID <> 'default' THEN
    RAISE EXCEPTION 'Can not rename default bucket';
  END IF;
  RETURN NEW;
END;
$a$;

DROP TRIGGER IF EXISTS check_default_bucket_delete ON storage_buckets;
CREATE TRIGGER check_default_bucket_delete
  BEFORE DELETE ON storage_buckets
  FOR EACH ROW
    EXECUTE PROCEDURE protect_default_bucket_delete ();

DROP TRIGGER IF EXISTS check_default_bucket_update ON storage_buckets;
CREATE TRIGGER check_default_bucket_update
  BEFORE UPDATE ON storage_buckets
  FOR EACH ROW
    EXECUTE PROCEDURE protect_default_bucket_update ();


DO $$
BEGIN
  IF NOT EXISTS(SELECT id
            FROM storage_buckets
            WHERE id = 'default')
  THEN
    INSERT INTO storage_buckets (id)
      VALUES ('default');
  END IF;
END $$;


ALTER TABLE "storage_files" ALTER COLUMN "id" SET DEFAULT public.gen_random_uuid();

'''


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0003_rename_created_date_roleorder_created_at_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Buckets',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('download_expiration', models.PositiveIntegerField(default=30)),
                ('min_upload_file_size', models.PositiveIntegerField(default=1)),
                ('max_upload_file_size', models.PositiveIntegerField(default=50000000)),
                ('cache_control', models.CharField(default='max-age=3600')),
                ('presigned_urls_enabled', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='created_at',
            value=NOW
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='updated_at',
            value=NOW
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='download_expiration',
            value=30
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='min_upload_file_size',
            value=1
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='max_upload_file_size',
            value=50000000
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='cache_control',
            value='max-age=3600'
        ),
        AddDefaultValue(
            model_name='Buckets',
            name='presigned_urls_enabled',
            value=True
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('size', models.PositiveIntegerField(null=True)),
                ('mime_type', models.TextField(null=True)),
                ('etag', models.TextField(null=True)),
                ('is_uploaded', models.BooleanField(default=False, null=True)),
                ('bucket_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.buckets')),
                ('uploaded_by_user_id',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        AddDefaultValue(
            model_name='Files',
            name='is_uploaded',
            value=False
        ),
        AddDefaultValue(
            model_name='Files',
            name='bucket_id',
            value='default'
        ),
        AddDefaultValue(
            model_name='Files',
            name='created_at',
            value=NOW
        ),
        AddDefaultValue(
            model_name='Files',
            name='updated_at',
            value=NOW
        ),
        migrations.RunSQL(SQL),
    ]
