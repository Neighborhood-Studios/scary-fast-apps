schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

type MyQueryOutput {
  id: String!
  last_seen: timestamptz!
  name: String!
}

input SampleInput {
  password: String!
  username: String!
}

type SampleOutput {
  accessToken: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  actionName(arg1: SampleInput!): SampleOutput

  """
  delete data from the table: "users_user"
  """
  delete_users_user(
    """filter the rows which have to be deleted"""
    where: users_user_bool_exp!
  ): users_user_mutation_response

  """
  delete single row from the table: "users_user"
  """
  delete_users_user_by_pk(auth0id: String!): users_user

  """
  insert data into the table: "users_user"
  """
  insert_users_user(
    """the rows to be inserted"""
    objects: [users_user_insert_input!]!

    """upsert condition"""
    on_conflict: users_user_on_conflict
  ): users_user_mutation_response

  """
  insert a single row into the table: "users_user"
  """
  insert_users_user_one(
    """the row to be inserted"""
    object: users_user_insert_input!

    """upsert condition"""
    on_conflict: users_user_on_conflict
  ): users_user

  """
  update data of the table: "users_user"
  """
  update_users_user(
    """sets the columns of the filtered rows to the given values"""
    _set: users_user_set_input

    """filter the rows which have to be updated"""
    where: users_user_bool_exp!
  ): users_user_mutation_response

  """
  update single row of the table: "users_user"
  """
  update_users_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_user_set_input
    pk_columns: users_user_pk_columns_input!
  ): users_user

  """
  update multiples rows of table: "users_user"
  """
  update_users_user_many(
    """updates to execute, in order"""
    updates: [users_user_updates!]!
  ): [users_user_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """Derived action example"""
  MyQuery(id: String): MyQueryOutput

  """
  fetch data from the table: "users_user"
  """
  users_user(
    """distinct select on columns"""
    distinct_on: [users_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_user_order_by!]

    """filter the rows returned"""
    where: users_user_bool_exp
  ): [users_user!]!

  """
  fetch aggregated fields from the table: "users_user"
  """
  users_user_aggregate(
    """distinct select on columns"""
    distinct_on: [users_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_user_order_by!]

    """filter the rows returned"""
    where: users_user_bool_exp
  ): users_user_aggregate!

  """fetch data from the table: "users_user" using primary key columns"""
  users_user_by_pk(auth0id: String!): users_user
}

type subscription_root {
  """
  fetch data from the table: "users_user"
  """
  users_user(
    """distinct select on columns"""
    distinct_on: [users_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_user_order_by!]

    """filter the rows returned"""
    where: users_user_bool_exp
  ): [users_user!]!

  """
  fetch aggregated fields from the table: "users_user"
  """
  users_user_aggregate(
    """distinct select on columns"""
    distinct_on: [users_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_user_order_by!]

    """filter the rows returned"""
    where: users_user_bool_exp
  ): users_user_aggregate!

  """fetch data from the table: "users_user" using primary key columns"""
  users_user_by_pk(auth0id: String!): users_user

  """
  fetch data from the table in a streaming manner: "users_user"
  """
  users_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_user_stream_cursor_input]!

    """filter the rows returned"""
    where: users_user_bool_exp
  ): [users_user!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users_user"
"""
type users_user {
  auth0id: String!
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""
aggregated selection of "users_user"
"""
type users_user_aggregate {
  aggregate: users_user_aggregate_fields
  nodes: [users_user!]!
}

"""
aggregate fields of "users_user"
"""
type users_user_aggregate_fields {
  count(columns: [users_user_select_column!], distinct: Boolean): Int!
  max: users_user_max_fields
  min: users_user_min_fields
}

"""
Boolean expression to filter rows from the table "users_user". All fields are combined with a logical 'AND'.
"""
input users_user_bool_exp {
  _and: [users_user_bool_exp!]
  _not: users_user_bool_exp
  _or: [users_user_bool_exp!]
  auth0id: String_comparison_exp
  email: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  phone_number: String_comparison_exp
}

"""
unique or primary key constraints on table "users_user"
"""
enum users_user_constraint {
  """
  unique or primary key constraint on columns "auth0id"
  """
  users_user_pkey
}

"""
input type for inserting data into table "users_user"
"""
input users_user_insert_input {
  auth0id: String
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""aggregate max on columns"""
type users_user_max_fields {
  auth0id: String
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""aggregate min on columns"""
type users_user_min_fields {
  auth0id: String
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""
response of any mutation on the table "users_user"
"""
type users_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users_user!]!
}

"""
on_conflict condition type for table "users_user"
"""
input users_user_on_conflict {
  constraint: users_user_constraint!
  update_columns: [users_user_update_column!]! = []
  where: users_user_bool_exp
}

"""Ordering options when selecting data from "users_user"."""
input users_user_order_by {
  auth0id: order_by
  email: order_by
  last_seen: order_by
  name: order_by
  phone_number: order_by
}

"""primary key columns input for table: users_user"""
input users_user_pk_columns_input {
  auth0id: String!
}

"""
select columns of table "users_user"
"""
enum users_user_select_column {
  """column name"""
  auth0id

  """column name"""
  email

  """column name"""
  last_seen

  """column name"""
  name

  """column name"""
  phone_number
}

"""
input type for updating data in table "users_user"
"""
input users_user_set_input {
  auth0id: String
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""
Streaming cursor of the table "users_user"
"""
input users_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_user_stream_cursor_value_input {
  auth0id: String
  email: String
  last_seen: timestamptz
  name: String
  phone_number: String
}

"""
update columns of table "users_user"
"""
enum users_user_update_column {
  """column name"""
  auth0id

  """column name"""
  email

  """column name"""
  last_seen

  """column name"""
  name

  """column name"""
  phone_number
}

input users_user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_user_set_input

  """filter the rows which have to be updated"""
  where: users_user_bool_exp!
}

